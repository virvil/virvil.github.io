<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-10T13:47:11.459Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Virvil</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JWT（JSON WEB TOKENS）的使用，无状态token机制</title>
    <link href="http://yoursite.com/2018/09/10/JWT%EF%BC%88JSON-WEB-TOKENS%EF%BC%89%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E6%97%A0%E7%8A%B6%E6%80%81token%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/09/10/JWT（JSON-WEB-TOKENS）的使用，无状态token机制/</id>
    <published>2018-09-10T13:44:04.000Z</published>
    <updated>2018-09-10T13:47:11.459Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JWT的优点"><a href="#JWT的优点" class="headerlink" title="JWT的优点"></a>JWT的优点</h3><p>由于JWT本身是无状态的，仅仅是存储登录授权的信息，可以实现单点登录的功能，因为在多个系统中只要在实现jwt token的时候用同一个密钥进行加密，则可以实现跨平台而登陆。</p><h3 id="JWT的缺点"><a href="#JWT的缺点" class="headerlink" title="JWT的缺点"></a>JWT的缺点</h3><p>==token泄露问题==：由于只要拿到token就可以在不同机器上进行登录，因此只要token泄露出去后用户可以通过登录后改变密码进行窃取。</p><p>==token续签问题==：jwt虽然内置了token过期的功能，但是并没有提供token续签的问题，如果用户在进行重要信息的存储时，刚好token过期了，则导致用户需要重新登录，因此容易造成重要信息丢失，影响客户体验。该项可以通过设计各种策略刷新token过期时间，而session这方面就比jwt好很多，session会自动刷新过期时间，例如是30min过期，但用户在30min内登录session后重新计算过期时间。</p><h3 id="JWT-token构成"><a href="#JWT-token构成" class="headerlink" title="JWT  token构成"></a>JWT  token构成</h3><h3 id="一个token包含三个部分（Header，Payload，Signature）"><a href="#一个token包含三个部分（Header，Payload，Signature）" class="headerlink" title="一个token包含三个部分（Header，Payload，Signature）"></a>一个token包含三个部分（Header，Payload，Signature）</h3><h4 id="header-头部"><a href="#header-头部" class="headerlink" title="header 头部"></a>header 头部</h4><p>标头<em>通常</em>由两部分组成：令牌的类型，即JWT，以及哈希算法，如HMAC SHA256或RSA。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HS256</code> 表示使用了 HMAC-SHA256 来生成签名。接下来对这部分内容使用 Base64Url编码组成了JWT结构的第一部分。</p><h4 id="Payload-载荷"><a href="#Payload-载荷" class="headerlink" title="Payload 载荷"></a>Payload 载荷</h4><p>payload包含三种类型的claim：<em>reserved</em>, <em>public</em> 和 <em>private</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reserved claims</strong>: 这些claim是JWT预先定义的，在JWT中并不会强制使用它们，而是推荐使用，常用的有 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss: jwt签发者</span><br><span class="line">sub: jwt所面向的用户</span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line">iat: jwt的签发时间</span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击</span><br></pre></td></tr></table></figure><p><strong>Public claims</strong>：根据需要定义自己的字段，注意应该避免冲突 </p><p><strong>Private claims</strong>：这些是自定义的字段，可以用来在双方之间交换信息 </p><p>上述的负载需要经过<strong>Base64Url</strong>编码后作为JWT结构的第二部分。</p><h4 id="Signature-签名"><a href="#Signature-签名" class="headerlink" title="Signature 签名"></a>Signature 签名</h4><p>jwt的第三部分是一个签证信息，这个签证信息算法如下：<br><code>base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload)+your-256-bit-secret</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p><h3 id="JWT简单案例"><a href="#JWT简单案例" class="headerlink" title="JWT简单案例"></a>JWT简单案例</h3><h4 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jwt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;&lt;code&gt;JwtTokenUtil&lt;/code&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;Creation Time:&lt;/b&gt; 2018\9\10 0010 12:03.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  virvil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> jwtdemo 0.0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant logger.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(JwtTokenUtil.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant properties.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant signkey.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String signkey = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The constant algorithm.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Algorithm algorithm = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    加载配置文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        InputStream inputStream = JwtTokenUtil.class.getClassLoader().getResourceAsStream(<span class="string">"jwt.properties"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            String signkey = properties.getProperty(<span class="string">"signkey"</span>);</span><br><span class="line">            algorithm = Algorithm.HMAC256(signkey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"读取配置文件异常"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get token string.</span></span><br><span class="line"><span class="comment">     *生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username the username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getToken</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        <span class="comment">//签发时间</span></span><br><span class="line">        Date issueDate = calendar.getTime();</span><br><span class="line">        <span class="comment">//过期时间</span></span><br><span class="line">        <span class="keyword">long</span> expires = issueDate.getTime()+Integer.parseInt(properties.getProperty(<span class="string">"timeout"</span>));</span><br><span class="line">        Date expiresDate = <span class="keyword">new</span> Date(expires);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//header</span></span><br><span class="line">        Map&lt;String,Object&gt; header = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        header.put(<span class="string">"alg"</span>,<span class="string">"HS256"</span>);</span><br><span class="line">        header.put(<span class="string">"typ"</span>,<span class="string">"JWT"</span>);</span><br><span class="line"></span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withHeader(header)  <span class="comment">//设置header头信息</span></span><br><span class="line">                .withClaim(<span class="string">"iss"</span>,<span class="string">"auth0"</span>)   <span class="comment">//设置payload</span></span><br><span class="line">                .withClaim(<span class="string">"username"</span>,username)</span><br><span class="line">                .withIssuedAt(issueDate)</span><br><span class="line">                .withExpiresAt(expiresDate)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Verify token map.</span></span><br><span class="line"><span class="comment">     *对token进行解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token the token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Claim&gt; <span class="title">verifyToken</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        JWTVerifier jwtVerifier = JWT.require(algorithm).build();</span><br><span class="line">        DecodedJWT verify = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            verify = jwtVerifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> verify.getClaims();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (TokenExpiredException ex)&#123;</span><br><span class="line">            logger.error(<span class="string">"token已经过期"</span>,ex);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"登录异常"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The entry point of application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args the input arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String username = <span class="string">"virvil"</span>;</span><br><span class="line">        String token = getToken(username);</span><br><span class="line">        <span class="comment">//验证token是否正确</span></span><br><span class="line">        Map&lt;String, Claim&gt; claims = verifyToken(token);</span><br><span class="line">        <span class="keyword">if</span> (claims!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Claim usernameClaim = claims.get(<span class="string">"username"</span>);</span><br><span class="line">            <span class="comment">//此处获得的信息可以到数据库中进行查询，验证是否存在该用户信息，这里我只是简单测试，莫怪</span></span><br><span class="line">            System.out.println(username.equals(usernameClaim.asString())?<span class="string">"token验证成功"</span>:<span class="string">"token验证失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用一个过期的token来验证结果</span></span><br><span class="line">        String token2 = <span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"</span> +</span><br><span class="line">                <span class="string">".eyJpc3MiOiJhdXRoMCIsImV4cCI6MTUzNjU2MTUzNSwiaWF0IjoxNTM2NTYxNTM0LCJ1c2VybmFtZSI6InZpcnZpbCJ9"</span> +</span><br><span class="line">                <span class="string">".JNNCERaaApOaoNYV45liZTJ-mF7UIRLNz-EY5tAPC4Q"</span>;</span><br><span class="line">        verifyToken(token2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JWT的优点&quot;&gt;&lt;a href=&quot;#JWT的优点&quot; class=&quot;headerlink&quot; title=&quot;JWT的优点&quot;&gt;&lt;/a&gt;JWT的优点&lt;/h3&gt;&lt;p&gt;由于JWT本身是无状态的，仅仅是存储登录授权的信息，可以实现单点登录的功能，因为在多个系统中只要在实现jwt
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="jwt" scheme="http://yoursite.com/tags/jwt/"/>
    
      <category term="单点登录" scheme="http://yoursite.com/tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
      <category term="token" scheme="http://yoursite.com/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>linux完全分布式redis集群安装</title>
    <link href="http://yoursite.com/2018/09/09/linux%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8Fredis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/09/09/linux完全分布式redis集群安装/</id>
    <published>2018-09-09T15:34:53.000Z</published>
    <updated>2018-09-10T13:46:35.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis集群安装完成后节点如下：（6主6从）"><a href="#redis集群安装完成后节点如下：（6主6从）" class="headerlink" title="redis集群安装完成后节点如下：（6主6从）"></a>redis集群安装完成后节点如下：（6主6从）</h3><p>192.168.209.128:6001 192.168.209.128:6002 192.168.209.129:6001 192.168.209.129:6002 192.168.209.130:6001 192.168.209.130:6002 192.168.209.128:6003 192.168.209.128:6004 192.168.209.129:6003      192.168.209.129:6004        192.168.209.130:6003      192.168.209.130:6004</p><p> //连接客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -h ip -p port (例如redis-cli -c -h 192.168.209.128 -p 6001)</span><br></pre></td></tr></table></figure><h3 id="redis下载与解压安装（192-168-209-128，192-168-209-129，192-168-209-129上同样操作）"><a href="#redis下载与解压安装（192-168-209-128，192-168-209-129，192-168-209-129上同样操作）" class="headerlink" title="redis下载与解压安装（192.168.209.128，192.168.209.129，192.168.209.129上同样操作）"></a>redis下载与解压安装（192.168.209.128，192.168.209.129，192.168.209.129上同样操作）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.12.tar.gz//下载</span><br><span class="line">tar xzf redis-3.2.12.tar.gz//解压</span><br><span class="line">cd redis-3.2.12</span><br><span class="line">make install//编译安装</span><br></pre></td></tr></table></figure><h3 id="创建存放数据文件"><a href="#创建存放数据文件" class="headerlink" title="创建存放数据文件"></a>创建存放数据文件</h3><p>在每台机器/usr/local下新建redis-cluster文件夹，在redis-cluster文件夹下创建data文件夹和redis6001 ，redis6002 ，redis6003 ， redis6004文件夹。然后再在data文件夹下分别新建6001,6002,6003,6004四个文件，用于存放数据等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir  /usr/local/redis-cluster</span><br><span class="line">cd /usr/local/redis-cluster</span><br><span class="line">mkdir redis6001 redis6002 redis6003 redis6004 //存放各个节点的配置文件</span><br><span class="line">cd /usr/local/redis-cluster/data</span><br><span class="line">mkdir 6001 6002 6003 6004//存放各个节点的数据</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>将/usr/local/redis-3.2.12下的redis.conf配置文件分别复制到redis600<em>文件夹下，并将redis600</em>下的redis.conf做如下修改（每个redis600*下的redis.conf都需修改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. daemonize yes</span><br><span class="line">2. port600* （对应每个机器的端口号，在此分别设置为6001，6002，6003，6004）</span><br><span class="line">3. bind 0.0.0.0</span><br><span class="line">4. cluster-enabled yes (开启集群模式)</span><br><span class="line">5. cluster-config-file nodes-600*.conf (最好跟端口号对应，方便识别，在此分别设置为6001，6002，6003，6004)</span><br><span class="line">6. cluster-node-timeout 5000</span><br><span class="line">7. appendonly yes</span><br><span class="line">8. protect-mode no</span><br><span class="line">9.dir /usr/local/redis-cluster/data/6001/ (在此分别设置为6001，6002，6003，6004)</span><br></pre></td></tr></table></figure><h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><p>由于redis集群需要ruby命令，需要安装ruby</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. yum install ruby</span><br><span class="line">2. yum install rubygems</span><br><span class="line">3. gem install redis</span><br></pre></td></tr></table></figure><p> ==执行以上命令可能会因为Ruby<em>**</em>版本过低，而执行失败==</p><p>ruby版本低</p><p>导入public 公钥，命令如下（直接复制即可）</p><p>gpg2 –recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</p><p> redis requires Ruby version &gt;= 2.2.2的报错，查了资料发现是Centos默认支持ruby到2.0.0，可gem 安装redis需要最低是2.2.2</p><p>解决办法是 先安装rvm，再把ruby版本提升至2.5.1，需要安装如下包</p><p>1.安装curl </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install curl</span><br></pre></td></tr></table></figure><p> ==可能出现的问题：==</p><p>curl: (35) SSL connect error问题处理</p><p>无法在服务器使用curl命令访问https域名,原因是nss版本有点旧了，使用以下命令更新一下，重新安装curl即可！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update nss</span><br></pre></td></tr></table></figure><p>2.安装RVM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L get.rvm.io | bash -s stable </span><br><span class="line"></span><br><span class="line">source /usr/local/rvm/scripts/rvm</span><br></pre></td></tr></table></figure><p>3.查看rvm库中已知的ruby版本，并安装ruby</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rvm list known//查看rvm库中已知的ruby版本</span><br><span class="line"></span><br><span class="line">rvm install 2.5.1//安装ruby</span><br><span class="line"></span><br><span class="line">rvm use 2.5.1//使用一个ruby版本</span><br><span class="line"></span><br><span class="line">ruby --version//查看当前版本</span><br></pre></td></tr></table></figure><p>4.再安装redis就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install redis</span><br></pre></td></tr></table></figure><h3 id="在每台机器启动服务器节点"><a href="#在每台机器启动服务器节点" class="headerlink" title="在每台机器启动服务器节点"></a>在每台机器启动服务器节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6001/redis.conf</span><br><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6002/redis.conf</span><br><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6003/redis.conf</span><br><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6004/redis.conf</span><br></pre></td></tr></table></figure><h4 id="向集群中添加节点"><a href="#向集群中添加节点" class="headerlink" title="向集群中添加节点"></a>向集群中添加节点</h4><p>（在任一一台机器上执行以下命令即可，（–replicas 1代表一主一从，–replicas 2代表一主两从））</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis-3.2.12/src/redis-trib.rb create --replicas 1 192.168.209.128:6001 192.168.209.128:6002 192.168.209.129:6001 192.168.209.129:6002 192.168.209.130:6001 192.168.209.130:6002 192.168.209.128:6003 192.168.209.128:6004 192.168.209.129:6003 192.168.209.129:6004 192.168.209.130:6003 192.168.209.130:6004</span><br></pre></td></tr></table></figure><h3 id="连接客户端（以下任一命令执行都可）"><a href="#连接客户端（以下任一命令执行都可）" class="headerlink" title="连接客户端（以下任一命令执行都可）"></a>连接客户端（以下任一命令执行都可）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6001</span><br><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6002</span><br><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6003</span><br><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6004</span><br></pre></td></tr></table></figure><h4 id="关闭某个节点命令"><a href="#关闭某个节点命令" class="headerlink" title="关闭某个节点命令"></a>关闭某个节点命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6001 shutdown</span><br><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6002 shutdown</span><br><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6003 shutdown</span><br><span class="line">/usr/local/bin/redis-cli -c -h 192.168.209.128 -p 6004 shutdown</span><br></pre></td></tr></table></figure><h3 id="清空所有节点数据"><a href="#清空所有节点数据" class="headerlink" title="清空所有节点数据"></a>清空所有节点数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.209.128 -p 6004  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.129 -p 6002  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.130 -p 6001  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.130 -p 6004  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.128 -p 6003  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.130 -p 6002  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.128 -p 6001  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.129 -p 6003  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.129 -p 6001  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.130 -p 6003  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.129 -p 6004  -c flushall</span><br><span class="line">redis-cli -h 192.168.209.128 -p 6002  -c flushall</span><br></pre></td></tr></table></figure><h3 id="免密登录（可有可无）"><a href="#免密登录（可有可无）" class="headerlink" title="免密登录（可有可无）"></a>免密登录（可有可无）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.209.128</span><br><span class="line">ssh 192.168.209.128</span><br></pre></td></tr></table></figure><h3 id="如果redis集群启动失败，（将-usr-local-redis-cluster-data下的文件都删除然后用一下方法进行测试）："><a href="#如果redis集群启动失败，（将-usr-local-redis-cluster-data下的文件都删除然后用一下方法进行测试）：" class="headerlink" title="如果redis集群启动失败，（将/usr/local/redis-cluster/data下的文件都删除然后用一下方法进行测试）："></a>如果redis集群启动失败，（将/usr/local/redis-cluster/data下的文件都删除然后用一下方法进行测试）：</h3><h4 id="安装telnet"><a href="#安装telnet" class="headerlink" title="安装telnet"></a>安装telnet</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install telnet-server</span><br><span class="line">yum install telnet.*</span><br></pre></td></tr></table></figure><h4 id="测试连接（一定得测通）"><a href="#测试连接（一定得测通）" class="headerlink" title="测试连接（一定得测通）"></a>测试连接（一定得测通）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet ip port //测试连接（例如：telnet 192.168.209.128 6001）</span><br></pre></td></tr></table></figure><h4 id="如何测不通，有如下两种解决方案，关闭防火墙，或者打开端口"><a href="#如何测不通，有如下两种解决方案，关闭防火墙，或者打开端口" class="headerlink" title="如何测不通，有如下两种解决方案，关闭防火墙，或者打开端口"></a>如何测不通，有如下两种解决方案，关闭防火墙，或者打开端口</h4><h5 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h5><p>service iptables status        //查看防火墙状态</p><p>service iptables stop         //关掉防火墙则所有端口都默认开放</p><h5 id="2-打开端口"><a href="#2-打开端口" class="headerlink" title="2.打开端口"></a>2.打开端口</h5><p>端口管理#开启6001端口（redis有个不成文规则，开启6001端口，就必须开启16001端口，即在原有端口+10000）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 6001 -j ACCEPT </span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 6002 -j ACCEPT </span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 6003 -j ACCEPT </span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 6004 -j ACCEPT</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 16001 -j ACCEPT </span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 16002 -j ACCEPT</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 16003 -j ACCEPT </span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 16004 -j ACCEPT</span><br><span class="line">/etc/rc.d/init.d/iptables save #保存配置 </span><br><span class="line">/etc/rc.d/init.d/iptables restart #重启服务 </span><br><span class="line">查看已开放端口 </span><br><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure><p>如果以上都没问题，则重新执行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//在每台机器启动服务器节点</span><br><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6001/redis.conf</span><br><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6002/redis.conf</span><br><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6003/redis.conf</span><br><span class="line">/usr/local/bin/redis-server /usr/local/redis-cluster/redis6004/redis.conf</span><br><span class="line">//远程集群中添加节点（在任一一台机器上执行以下命令即可，（--replicas 1代表一主一从，--replicas 2代表一主两从））</span><br><span class="line">/usr/local/redis-3.2.12/src/redis-trib.rb create --replicas 1 192.168.209.128:6001 192.168.209.128:6002 192.168.209.129:6001 192.168.209.129:6002 192.168.209.130:6001 192.168.209.130:6002 192.168.209.128:6003 192.168.209.128:6004 192.168.209.129:6003 192.168.209.129:6004 192.168.209.130:6003 192.168.209.130:6004</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redis集群安装完成后节点如下：（6主6从）&quot;&gt;&lt;a href=&quot;#redis集群安装完成后节点如下：（6主6从）&quot; class=&quot;headerlink&quot; title=&quot;redis集群安装完成后节点如下：（6主6从）&quot;&gt;&lt;/a&gt;redis集群安装完成后节点如下：
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="集群" scheme="http://yoursite.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
      <category term="完全分布式" scheme="http://yoursite.com/tags/%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hadoop</title>
    <link href="http://yoursite.com/2018/09/08/hadoop/"/>
    <id>http://yoursite.com/2018/09/08/hadoop/</id>
    <published>2018-09-08T15:28:09.000Z</published>
    <updated>2018-09-08T16:30:52.394Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;

      
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/08/hello-world/"/>
    <id>http://yoursite.com/2018/09/08/hello-world/</id>
    <published>2018-09-08T13:37:51.672Z</published>
    <updated>2018-09-08T13:37:51.672Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
